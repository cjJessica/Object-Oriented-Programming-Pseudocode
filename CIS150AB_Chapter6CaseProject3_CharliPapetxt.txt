//Follow the STEP numbers IN ORDER.  Do not rearrange the order of
//steps and please leave the instruction comments in place
//USE THE PSEDUOCODE FORMATTING AS PROVIDED IN THE TEXT 
// OR YOUR SUBMISSION MAY NOT BE GRADED/ACCEPTED

class Kennel
main()

// Declarations
string found
num dogIdNum
num x
num foundIndex 
num availKennels
num weight
num QUIT = 9999
num CAPACITY = 8
num WEIGHT_LIMIT[CAPACITY] = 50, 50, 100, 100, 100, 100, 1000, 1000
num avail_kennel[CAPACITY] = 0

availKennels = CAPACITY
ouput "Enter a dog ID number or " + QUIT + " to quit"
input dogIdNum

while dogIdNum <> QUIT AND availKennels > 0
		
//NOTE: You should complete STEPS 1 through 8 below first, 
//then return here to complete STEP 9.

//STEP 9: Call the function you created in STEPS 1 through 8
// i. Pass in "dogIdNum" as the argument for the single parameter.
// ii. Make sure you use the correct function name when calling it.
// iii. Make sure you store the returned value 
//		in the "weight" variable.
// (Remove the quotes from "dogIdNum" and "weight" in your code)

	weight = getDogInfo(dogIdNum)

	if weight > 0 then
		x = 0
		found = "N"
		while weight > WEIGHT_LIMIT[x] AND x < LENGTH
			x = x + 1
		endwhile
		
		if avail_kennel[x] <> 0 then
			while WEIGHT_LIMIT[x] = WEIGHT_LIMIT[x+1] AND 
					x < LENGTH-1
				if avail_kennel[x+1] = 0 then
					foundIndex = x + 1
					x = LENGTH
					found = "Y"
				else
					x = x + 1
				endif
			endwhile
		else
			foundIndex = x
			found = "Y"
		endif

		if found = "Y" then
			avail_kennel[foundIndex] = dogIdNum
			availKennels = availKennels â€“ 1
		else
			output "No kennel is available"
		endif
	endif

	ouput "Enter a dog ID number or " + QUIT + 
		" to quit"
	input dogIdNum
endwhile

x = 0

while x < LENGTH
	if avail_kennel[x] <> 0 then
		output "Kennel #" + (x+1) + " 
			is assigned to ID #" + avail_kennel[x]
	else
		output "Kennel #" + (x+1) + " is empty"
	endif
	
	x = x + 1
endwhile

return

//STEP 1: Add a new function with the following signature.
//YOU MUST USE THE PSEDUOCODE NOTATION PROVIDED IN THE TEXT!
//	i. The function should return a numeric data type
// ii. The function should be called "getDogInfo" 
//		(remove the double quotes!)
//iii. The function should accept ONE numeric parameter 
//		called "id" (remove the quotes!)

num getDogInfo(num id)

//NOTE: STEPS 2 through 7 are all code INSIDE the function 
//you just created

//STEP 2: Add the following numeric variables to your new function:
//  i. "x", with an initial value of 0
// ii. "found", with an initial value of 0
//iii. "weight", but don't assign an initial value
//Also, add a numeric constant called "LENGTH", with a value of 15.
//(The double quotes should NOT be part of the names of these 
//	variables/constants)

	num x = 0
	num found = 0
	num weight 
	num LENGTH = 15

//STEP 3: Using "LENGTH" as the size, create the following numeric array
//  i. Call it "ID_NUM" (without the double quotes)
// ii. Give it the following list of values:
//		1001, 1003, 1007, 1008, 1012, 1034, 1038, 1087, 1088, 
//		1120, 1129, 1145, 1200, 1211, 1222

	num ID_NUM[LENGTH] = 1001, 1003, 1007, 1008, 1012, 1034, 1038, 1087, 1088, 1120, 1129, 1145, 1200, 1211, 1222

//STEP 4: Using "LENGTH" as the size, create the following numeric array
//  i. Call it "WEIGHT" (without the double quotes)
// ii. Give it the following list of values:
//		130, 80, 45, 18, 70, 12, 90, 16, 35, 65, 20, 100, 110, 70, 55

	num WEIGHT[LENGTH] = 130, 80, 45, 18, 70, 12, 90, 16, 35, 65, 20, 100, 110, 70, 55

//STEP 5: Using "LENGTH" as the size, create the following numeric array
//  i. Call it "NAME" (without the double quotes)
// ii. Give it the following list of values:
//		"Bowser", "Ginger", "Molly", "Murphy", "Roxy", "Samantha",
		"Duke", "Pookie", "Abby", "Barney", "Autumn", "Hershey", "King", 
//		"Bosco", "Daisy"
//THESE VALUES SHOULD REMAIN IN QUOTES BECAUSE THEY ARE LITERAL STRINGS

	string NAME[LENGTH] = "Bowser", "Ginger", "Molly", "Murphy", "Roxy", "Samantha", "Duke", "Pookie", "Abby", "Barney", "Autumn", "Hershey", "King", "Bosco", "Daisy"

//STEP 6: We are looking to see if the "id" parameter for the function 
//exists in the "ID_NUM" array.
//  i. Use a while loop with the "x" variable as the counter
// ii. Use the "LENGTH" constant to determine when you've reached the 
//		end of the array
//iii. Use an "if/else" statement to set "found" equal to 1 when 
//		you've found "id" in the "ID_NUM" array and terminate the loop
//NOTE: Your while loop test should test that x < LENGTH AND that 
//	found is 0

	while x < LENGTH AND found = 0
		//I know in python I could do (id in ID_NUM), but is that too
		//language specific for this pseudocode?
		//I think it would defeat the purpose of the while loop
		if (id = ID_NUM[x]) then
			found = 1
		else
			x += 1
		endif
		
	
//STEP 7: AFTER the loop in STEP 6 ends, write an "if/else" 
//	statement to test
// if "found" is equal to 1.
// i. If the "id" was found in the "ID_NUM" array (STEP 6) and 
//		do the following:
//		1. output the name of the dog using "x" and the "NAME" array
//		2. set "weight" to the "x" element of the "WEIGHT" array
// ii. If the "id" was NOT found in the "ID_NUM" array (STEP 6), 
//		output an error message and set "weight" to 0.

	if found = 1 then
		output NAME[x]
		weight = WEIGHT[x]
	else
		output "id not found"
		weight = 0

//STEP 8: "weight" should be returned by the function
//This is the end of the new function.

	return weight

endClass
